<?php
/**
 * Test pro Rule 31 diagnostiku
 * 
 * @package DistanceBasedShipping
 */

// Zabr√°nƒõn√≠ p≈ô√≠m√©mu p≈ô√≠stupu
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Test Rule 31 probl√©mu
 */
function dbs_test_rule31_problem() {
    echo '<h2>Test Rule 31 - Diagnostika probl√©mu</h2>';
    
    // Naj√≠t pravidlo podle n√°zvu nebo ID
    $rule_31 = null;
    
    // Nejprve zkusit podle ID 31
    $rule_31 = dbs_get_shipping_rule( 31 );
    
    // Pokud nebylo nalezeno podle ID, hledat podle n√°zvu
    if ( ! $rule_31 ) {
        $all_rules = dbs_get_shipping_rules( false ); // Vƒçetnƒõ neaktivn√≠ch
        foreach ( $all_rules as $rule ) {
            if ( strpos( strtolower( $rule->rule_name ), 'rule 31' ) !== false || 
                 strpos( strtolower( $rule->rule_name ), 'doprava zdarma nad 5000' ) !== false ) {
                $rule_31 = $rule;
                break;
            }
        }
    }
    
    if ( ! $rule_31 ) {
        echo '<p style="color: red;">‚ùå Rule 31 nebyla nalezena v datab√°zi!</p>';
        echo '<h3>Dostupn√° pravidla pro kontrolu:</h3>';
        $all_rules = dbs_get_shipping_rules( false );
        echo '<ul>';
        foreach ( $all_rules as $rule ) {
            echo '<li>ID: ' . $rule->id . ' - ' . esc_html( $rule->rule_name ) . ' (Aktivn√≠: ' . ($rule->is_active ? 'Ano' : 'Ne') . ')</li>';
        }
        echo '</ul>';
        return;
    }
    
    echo '<p style="color: green;">‚úÖ Nalezeno pravidlo: <strong>' . esc_html( $rule_31->rule_name ) . '</strong> (ID: ' . $rule_31->id . ')</p>';
    
    echo '<h3>Rule 31 parametry:</h3>';
    echo '<ul>';
    echo '<li><strong>N√°zev:</strong> ' . esc_html( $rule_31->rule_name ) . '</li>';
    echo '<li><strong>V√°ha:</strong> ' . $rule_31->weight_min . ' - ' . $rule_31->weight_max . ' kg</li>';
    echo '<li><strong>Vzd√°lenost:</strong> ' . $rule_31->distance_from . ' - ' . $rule_31->distance_to . ' km</li>';
    echo '<li><strong>Z√°kladn√≠ sazba:</strong> ' . $rule_31->base_rate . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '<li><strong>Sazba za km:</strong> ' . $rule_31->per_km_rate . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '<li><strong>Priorita:</strong> ' . $rule_31->priority . '</li>';
    echo '<li><strong>Aktivn√≠:</strong> ' . ($rule_31->is_active ? 'Ano' : 'Ne') . '</li>';
    echo '<li><strong>V√°hov√Ω oper√°tor:</strong> ' . ($rule_31->weight_operator ?? 'AND') . '</li>';
    echo '<li><strong>Rozmƒõrov√Ω oper√°tor:</strong> ' . ($rule_31->dimensions_operator ?? 'AND') . '</li>';
    echo '</ul>';
    
    // Vytvo≈ôen√≠ testovac√≠ch bal√≠ƒçk≈Ø pro r≈Øzn√© sc√©n√°≈ôe
    echo '<h3>Testovac√≠ sc√©n√°≈ôe:</h3>';
    
    // Urƒçit v√°hov√Ω rozsah pro testov√°n√≠ (pokud nen√≠ omezen√Ω, pou≈æ√≠t 3kg)
    $test_weight = 3; // Standardn√≠ testovac√≠ v√°ha
    if ( $rule_31->weight_min > 0 || $rule_31->weight_max > 0 ) {
        if ( $rule_31->weight_max > 0 ) {
            $test_weight = ($rule_31->weight_min + $rule_31->weight_max) / 2;
        } else {
            $test_weight = $rule_31->weight_min + 1;
        }
    }
    
    // Urƒçit vzd√°lenost pro testov√°n√≠ (pro 0-500km pou≈æijme 50km)
    $test_distance = 50; // Bezpeƒçn√° vzd√°lenost v rozsahu
    if ( $rule_31->distance_to > 0 ) {
        $test_distance = min( 50, $rule_31->distance_to / 2 ); // Polovina rozsahu nebo 50km
    }
    
    // Urƒçit hodnotu ko≈°√≠ku (pro min 5000 Kƒç pou≈æijme 6000 Kƒç)
    $test_cart_total = 6000; // Nad minimem
    if ( $rule_31->min_order_amount > 0 ) {
        $test_cart_total = $rule_31->min_order_amount + 1000; // +1000 nad minimum
    }
    
    echo '<h4>Sc√©n√°≈ô 1: Testovac√≠ bal√≠ƒçek by mƒõl vyhovovat Rule 31</h4>';
    echo '<ul>';
    echo '<li><strong>Testovac√≠ v√°ha:</strong> ' . $test_weight . ' kg</li>';
    echo '<li><strong>Testovac√≠ vzd√°lenost:</strong> ' . $test_distance . ' km</li>';
    echo '<li><strong>Testovac√≠ hodnota ko≈°√≠ku:</strong> ' . $test_cart_total . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '</ul>';
    
    // Vytvo≈ôen√≠ testovac√≠ho produktu
    $test_product = new class {
        private $weight;
        
        public function __construct() {
            global $test_weight;
            $this->weight = $test_weight;
        }
        
        public function get_name() { return 'Test produkt Rule 31'; }
        public function get_weight() { return $this->weight; }
        public function get_length() { return 100; }
        public function get_width() { return 100; }
        public function get_height() { return 100; }
        public function get_id() { return 999; }
    };
    
    $test_package = array(
        'contents' => array(
            'test_item' => array(
                'data' => $test_product,
                'quantity' => 1,
                'product_id' => 999,
                'variation_id' => 0
            )
        ),
        'contents_cost' => $test_cart_total
    );
    
    // Test v√°hov√©ho v√Ωpoƒçtu
    if ( function_exists( 'dbs_get_package_weight' ) ) {
        $calculated_weight = dbs_get_package_weight( $test_package );
        echo '<p>üì¶ V√°hov√Ω v√Ωpoƒçet: ' . $calculated_weight . ' kg</p>';
    }
    
    // Test v≈°ech podm√≠nek
    if ( function_exists( 'dbs_check_all_conditions' ) ) {
        $all_conditions_ok = dbs_check_all_conditions( $rule_31, $test_package );
        echo '<p>' . ($all_conditions_ok ? '‚úÖ' : '‚ùå') . ' V≈°echny podm√≠nky: ' . 
             ($all_conditions_ok ? 'PRO≈†LY' : 'NEPRO≈†LY') . '</p>';
    }
    
    // Test v√°hov√© podm√≠nky
    if ( function_exists( 'dbs_check_weight_condition' ) ) {
        $weight_condition_ok = dbs_check_weight_condition( $rule_31, $test_package );
        echo '<p>' . ($weight_condition_ok ? '‚úÖ' : '‚ùå') . ' V√°hov√° podm√≠nka: ' . 
             ($weight_condition_ok ? 'PRO≈†LA' : 'NEPRO≈†LA') . '</p>';
    }
    
    // Test rozmƒõrov√© podm√≠nky
    if ( function_exists( 'dbs_check_dimensions_condition' ) ) {
        $dimensions_condition_ok = dbs_check_dimensions_condition( $rule_31, $test_package );
        echo '<p>' . ($dimensions_condition_ok ? '‚úÖ' : '‚ùå') . ' Rozmƒõrov√° podm√≠nka: ' . 
             ($dimensions_condition_ok ? 'PRO≈†LA' : 'NEPRO≈†LA') . '</p>';
    }
    
    // Test podm√≠nky hodnoty ko≈°√≠ku (kritick√© pro Rule 31)
    echo '<h4>Test podm√≠nky hodnoty ko≈°√≠ku:</h4>';
    echo '<ul>';
    echo '<li><strong>Minim√°ln√≠ hodnota:</strong> ' . $rule_31->min_order_amount . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '<li><strong>Maxim√°ln√≠ hodnota:</strong> ' . ($rule_31->max_order_amount > 0 ? $rule_31->max_order_amount : 'Neomezeno') . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '<li><strong>Testovac√≠ hodnota:</strong> ' . $test_cart_total . ' ' . get_woocommerce_currency_symbol() . '</li>';
    echo '</ul>';
    
    // Simulace WooCommerce ko≈°√≠ku pro test
    $cart_condition_met = true;
    if ( $rule_31->min_order_amount > 0 && $test_cart_total < $rule_31->min_order_amount ) {
        $cart_condition_met = false;
    }
    if ( $rule_31->max_order_amount > 0 && $test_cart_total > $rule_31->max_order_amount ) {
        $cart_condition_met = false;
    }
    
    echo '<p>' . ($cart_condition_met ? '‚úÖ' : '‚ùå') . ' Podm√≠nka hodnoty ko≈°√≠ku: ' . 
         ($cart_condition_met ? 'PRO≈†LA' : 'NEPRO≈†LA') . '</p>';
    
    // Test aplikovatelnosti pravidla
    echo '<h4>Sc√©n√°≈ô 2: Test aplikovatelnosti cel√©ho pravidla</h4>';
    
    // Simulace distance a test aplikovatelnosti
    if ( class_exists( 'DBS_Shipping_Method' ) ) {
        $shipping_method = new DBS_Shipping_Method();
        // Pou≈æijeme reflexi pro p≈ô√≠stup k private metodƒõ
        $reflection = new ReflectionClass( $shipping_method );
        $method = $reflection->getMethod( 'is_rule_applicable' );
        $method->setAccessible( true );
        
        $is_applicable = $method->invoke( $shipping_method, $rule_31, $test_distance, $test_package );
        echo '<p>' . ($is_applicable ? '‚úÖ' : '‚ùå') . ' Pravidlo aplikovateln√©: ' . 
             ($is_applicable ? 'ANO' : 'NE') . '</p>';
    }
    
    echo '<h4>Sc√©n√°≈ô 3: Test s ko≈°√≠kem POD limitem (mƒõl by se NEAPLIKOVAT)</h4>';
    
    // Test s n√≠zkou hodnotou ko≈°√≠ku
    $low_cart_total = 3000; // Pod limitem 5000
    $test_package_low = $test_package;
    $test_package_low['contents_cost'] = $low_cart_total;
    
    echo '<ul>';
    echo '<li><strong>Ko≈°√≠k pod limitem:</strong> ' . $low_cart_total . ' ' . get_woocommerce_currency_symbol() . ' (limit: ' . $rule_31->min_order_amount . ')</li>';
    echo '</ul>';
    
    // Simulace podm√≠nky ko≈°√≠ku pro n√≠zkou hodnotu
    $low_cart_condition_met = true;
    if ( $rule_31->min_order_amount > 0 && $low_cart_total < $rule_31->min_order_amount ) {
        $low_cart_condition_met = false;
    }
    
    echo '<p>' . ($low_cart_condition_met ? '‚ùå CHYBA' : '‚úÖ') . ' Podm√≠nka ko≈°√≠ku s n√≠zkou hodnotou: ' . 
         ($low_cart_condition_met ? 'PRO≈†LA (≈°patnƒõ!)' : 'NEPRO≈†LA (spr√°vnƒõ)') . '</p>';
    
    // Test aplikovatelnosti s n√≠zk√Ωm ko≈°√≠kem
    if ( class_exists( 'DBS_Shipping_Method' ) ) {
        $shipping_method = new DBS_Shipping_Method();
        $reflection = new ReflectionClass( $shipping_method );
        $method = $reflection->getMethod( 'is_rule_applicable' );
        $method->setAccessible( true );
        
        $is_applicable_low = $method->invoke( $shipping_method, $rule_31, $test_distance, $test_package_low );
        echo '<p>' . ($is_applicable_low ? '‚ùå CHYBA' : '‚úÖ') . ' Pravidlo s n√≠zk√Ωm ko≈°√≠kem: ' . 
             ($is_applicable_low ? 'APLIKOVALO SE (≈°patnƒõ!)' : 'NEAPLIKOVALO SE (spr√°vnƒõ)') . '</p>';
    }
    
    echo '<h4>Sc√©n√°≈ô 4: V≈°echna pravidla pro porovn√°n√≠</h4>';
    
    $all_rules = dbs_get_shipping_rules( true );
    echo '<p>Celkem aktivn√≠ch pravidel: ' . count( $all_rules ) . '</p>';
    
    echo '<table border="1" cellpadding="5" style="border-collapse: collapse;">';
    echo '<tr><th>ID</th><th>N√°zev</th><th>V√°ha (kg)</th><th>Vzd√°lenost (km)</th><th>Priorita</th><th>Aktivn√≠</th></tr>';
    
    foreach ( $all_rules as $rule ) {
        $weight_range = $rule->weight_min . '-' . ($rule->weight_max > 0 ? $rule->weight_max : '‚àû');
        $distance_range = $rule->distance_from . '-' . ($rule->distance_to > 0 ? $rule->distance_to : '‚àû');
        
        echo '<tr>';
        echo '<td>' . $rule->id . '</td>';
        echo '<td>' . esc_html( $rule->rule_name ) . '</td>';
        echo '<td>' . $weight_range . '</td>';
        echo '<td>' . $distance_range . '</td>';
        echo '<td>' . $rule->priority . '</td>';
        echo '<td>' . ($rule->is_active ? 'Ano' : 'Ne') . '</td>';
        echo '</tr>';
    }
    
    echo '</table>';
} 